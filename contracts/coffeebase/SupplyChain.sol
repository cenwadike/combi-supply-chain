pragma solidity ^0.4.24;

import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeecore/Ownable.sol";

contract SupplyChain is
    FarmerRole,
    DistributorRole,
    RetailerRole,
    ConsumerRole
{
    address owner;

    uint upc;

    uint sku;

    mapping(uint => Item) items;

    // Define enum 'State' with the following values:
    enum State {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased // 7
    }

    State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint sku; // Stock Keeping Unit (SKU)
        uint upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // events
    event Harvested(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    // modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner of this contract");
        _;
    }

    // modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address, "Caller not verified");
        _;
    }

    // modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) {
        require(msg.value >= _price, "Paid amount is insufficient");
        _;
    }

    // modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        msg.sender.transfer(amountToReturn);
    }

    // modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint _upc) {
        require(
            items[_upc].itemState == State.Harvested,
            "Item is not yet harvested"
        );
        _;
    }

    // modifier that checks if an item.state of a upc is Processed
    modifier processed(uint _upc) {
        require(
            items[_upc].itemState == State.Processed,
            "Item is not yet processed"
        );
        _;
    }

    // modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(
            items[_upc].itemState == State.Packed,
            "Item is not yet packed"
        );
        _;
    }

    // modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale, "Item is not for sale");
        _;
    }

    // modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold, "Item is not sold");
        _;
    }

    // modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(
            items[_upc].itemState == State.Shipped,
            "Item is not yet shipped"
        );
        _;
    }

    // modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(
            items[_upc].itemState == State.Received,
            "Item is not yet received"
        );
        _;
    }

    // modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(
            items[_upc].itemState == State.Purchased,
            "Item is not purchased"
        );
        _;
    }

    constructor() public payable {
        owner = msg.sender;
        sku = 1;
        upc = 1;
    }

    function kill() public {
        if (msg.sender == owner) {
            selfdestruct(owner);
        }
    }

    function harvestItem(
        uint _upc,
        address _originFarmerID,
        string _originFarmName,
        string _originFarmInformation,
        string _originFarmLatitude,
        string _originFarmLongitude,
        string _productNotes
    ) public onlyFarmer {
        items[_upc] = Item(
            sku,
            _upc,
            _originFarmerID,
            _originFarmerID,
            _originFarmName,
            _originFarmInformation,
            _originFarmLatitude,
            _originFarmLongitude,
            sku + upc,
            _productNotes,
            0,
            State.Harvested,
            address(0),
            address(0),
            address(0)
        );
        sku = sku + 1;
        emit Harvested(_upc);
    }

    function processItem(uint _upc)
        public
        harvested(_upc)
        onlyFarmer
        verifyCaller(items[_upc].originFarmerID)
    {
        items[_upc].itemState = State.Processed;
        emit Processed(_upc);
    }

    function packItem(uint _upc)
        public
        processed(_upc)
        onlyFarmer
        verifyCaller(items[_upc].originFarmerID)
    {
        items[_upc].itemState = State.Packed;
        emit Packed(_upc);
    }

    function sellItem(uint _upc, uint _price)
        public
        packed(_upc)
        onlyFarmer
        verifyCaller(items[_upc].originFarmerID)
    {
        items[_upc].productPrice = _price;
        items[_upc].itemState = State.ForSale;
        emit ForSale(_upc);
    }

    function buyItem(uint _upc)
        public
        payable
        onlyDistributor
        forSale(_upc)
        paidEnough(items[_upc].productPrice)
        checkValue(_upc)
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].distributorID = msg.sender;
        items[_upc].itemState = State.Sold;
        items[_upc].originFarmerID.transfer(items[_upc].productPrice);
        emit Sold(_upc);
    }

    function shipItem(uint _upc)
        public
        sold(_upc)
        onlyFarmer
        verifyCaller(items[_upc].originFarmerID)
    {
        items[_upc].itemState = State.Shipped;
        emit Shipped(_upc);
    }

    function receiveItem(uint _upc)
        public
        shipped(_upc)
        onlyRetailer
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].retailerID = msg.sender;
        items[_upc].itemState = State.Received;
        emit Received(_upc);
    }

    function purchaseItem(uint _upc)
        public
        received(_upc)
        onlyConsumer
    {
        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;
        items[_upc].itemState = State.Purchased;
        emit Purchased(_upc);
    }

    function fetchItemBufferOne(uint _upc)
        public
        view
        returns (
            uint itemSKU,
            uint itemUPC,
            address ownerID,
            address originFarmerID,
            string originFarmName,
            string originFarmInformation,
            string originFarmLatitude,
            string originFarmLongitude
        )
    {
        Item memory item = items[_upc];
        itemSKU = item.sku;
        itemUPC = item.upc;
        ownerID = item.ownerID;
        originFarmerID = item.originFarmerID;
        originFarmName = item.originFarmName;
        originFarmInformation = item.originFarmInformation;
        originFarmLatitude = item.originFarmLatitude;
        originFarmLongitude = item.originFarmLongitude;

        return (
            itemSKU,
            itemUPC,
            ownerID,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude
        );
    }

    function fetchItemBufferTwo(uint _upc)
        public
        view
        returns (
            uint itemSKU,
            uint itemUPC,
            uint productID,
            string productNotes,
            uint productPrice,
            uint itemState,
            address distributorID,
            address retailerID,
            address consumerID
        )
    {
        Item memory item = items[_upc];
        itemSKU = item.sku;
        itemUPC = item.upc;
        productID = item.productID;
        productNotes = item.productNotes;
        productPrice = item.productPrice;
        itemState = uint(item.itemState);
        distributorID = item.distributorID;
        retailerID = item.retailerID;
        consumerID = item.consumerID;

        return (
            itemSKU,
            itemUPC,
            productID,
            productNotes,
            productPrice,
            itemState,
            distributorID,
            retailerID, 
            consumerID
        );
    }
}
